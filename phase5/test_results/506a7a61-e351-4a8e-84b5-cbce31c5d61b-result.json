{"name": "Test create issue with correct data", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=69.0.3497.92)\n  (Driver info: chromedriver=2.42.591088 (7b2b2dca23cca0862f674758c9a3933e685c27d5),platform=Windows NT 10.0.14393 x86_64)", "trace": "self = <src.tests.test_selenium.TestIssues object at 0x000001DD39BDEF60>\nissue_data = {'description': 'this is a test Story', 'project': 'AQAPython (AQAPYTHON)', 'summary': 'AlexART - Test Story', 'type': 'Story'}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4b0dfc2817d1a41437920cceb58dca16\")>\njira_rest = <src.rest.jira.Jira object at 0x000001DD39BAD9E8>\n\n    @allure.step\n    @allure.tag('UI')\n    @allure.feature('Issues management')\n    @allure.story('Create issue')\n    @allure.title(\"Test create issue with correct data\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"issue_data\", [{\"project\": \"AQAPython (AQAPYTHON)\", \"summary\": \"AlexART - Test Story\", \"type\": \"Story\",\n                                             \"description\": \"this is a test Story\"},\n                                            {\"project\": \"AQAPython (AQAPYTHON)\", \"summary\": \"AlexART - Test Bug\", \"type\": \"Bug\",\n                                             \"description\": \"this is a test Bug\", \"priority\": \"Medium\"}])\n    def test_create_issue_positive(self, issue_data, driver, jira_rest):\n        # login\n        login_page = LoginPage(driver)\n        login_page.go(\"http://jira.hillel.it:8080/\")\n        login_page.login(\"Alexander_Artemov\", \"Alexander_Artemov\")\n    \n        # create issue\n        dashboard_page = GeneralPage(driver)\n>       issue_key = dashboard_page.create_issue(**issue_data)\n\nsrc\\tests\\test_selenium.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\pages\\pages.py:48: in create_issue\n    self.create_issue_dialog.issue_type = type\nsrc\\pages\\page_elements.py:200: in issue_type\n    self.type_select.value = value\nsrc\\pages\\page_elements.py:113: in value\n    e = self.input_element.wait_to_be_enabled()\nsrc\\pages\\page_elements.py:64: in wait_to_be_enabled\n    return self.wait(EC.element_to_be_clickable(self.locator), timeout)\nsrc\\pages\\page_elements.py:55: in wait\n    return WebDriverWait(self.driver, timeout).until(cond)\n..\\phase4\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: in until\n    value = method(self._driver)\n..\\phase4\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:298: in __call__\n    if element and element.is_enabled():\n..\\phase4\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:159: in is_enabled\n    return self._execute(Command.IS_ELEMENT_ENABLED)['value']\n..\\phase4\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:628: in _execute\n    return self._parent.execute(command, params)\n..\\phase4\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:320: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DD39BDE710>\nresponse = {'sessionId': '4b0dfc2817d1a41437920cceb58dca16', 'status': 10, 'value': {'message': 'stale element reference: element...ver info: chromedriver=2.42.591088 (7b2b2dca23cca0862f674758c9a3933e685c27d5),platform=Windows NT 10.0.14393 x86_64)'}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: chrome=69.0.3497.92)\nE         (Driver info: chromedriver=2.42.591088 (7b2b2dca23cca0862f674758c9a3933e685c27d5),platform=Windows NT 10.0.14393 x86_64)\n\n..\\phase4\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: StaleElementReferenceException"}, "steps": [{"name": "test_create_issue_positive", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=69.0.3497.92)\n  (Driver info: chromedriver=2.42.591088 (7b2b2dca23cca0862f674758c9a3933e685c27d5),platform=Windows NT 10.0.14393 x86_64)\n\n", "trace": "  File \"c:\\users\\aartemov\\pycharmprojects\\pythoncourse\\phase4\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 141, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\aartemov\\PycharmProjects\\pythoncourse\\phase5\\src\\tests\\test_selenium.py\", line 126, in test_create_issue_positive\n    issue_key = dashboard_page.create_issue(**issue_data)\n  File \"C:\\Users\\aartemov\\PycharmProjects\\pythoncourse\\phase5\\src\\pages\\pages.py\", line 48, in create_issue\n    self.create_issue_dialog.issue_type = type\n  File \"C:\\Users\\aartemov\\PycharmProjects\\pythoncourse\\phase5\\src\\pages\\page_elements.py\", line 200, in issue_type\n    self.type_select.value = value\n  File \"C:\\Users\\aartemov\\PycharmProjects\\pythoncourse\\phase5\\src\\pages\\page_elements.py\", line 113, in value\n    e = self.input_element.wait_to_be_enabled()\n  File \"C:\\Users\\aartemov\\PycharmProjects\\pythoncourse\\phase5\\src\\pages\\page_elements.py\", line 64, in wait_to_be_enabled\n    return self.wait(EC.element_to_be_clickable(self.locator), timeout)\n  File \"C:\\Users\\aartemov\\PycharmProjects\\pythoncourse\\phase5\\src\\pages\\page_elements.py\", line 55, in wait\n    return WebDriverWait(self.driver, timeout).until(cond)\n  File \"c:\\users\\aartemov\\pycharmprojects\\pythoncourse\\phase4\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 71, in until\n    value = method(self._driver)\n  File \"c:\\users\\aartemov\\pycharmprojects\\pythoncourse\\phase4\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 298, in __call__\n    if element and element.is_enabled():\n  File \"c:\\users\\aartemov\\pycharmprojects\\pythoncourse\\phase4\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 159, in is_enabled\n    return self._execute(Command.IS_ELEMENT_ENABLED)['value']\n  File \"c:\\users\\aartemov\\pycharmprojects\\pythoncourse\\phase4\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 628, in _execute\n    return self._parent.execute(command, params)\n  File \"c:\\users\\aartemov\\pycharmprojects\\pythoncourse\\phase4\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 320, in execute\n    self.error_handler.check_response(response)\n  File \"c:\\users\\aartemov\\pycharmprojects\\pythoncourse\\phase4\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "issue_data", "value": "{'project': 'AQAPython (AQAPYTHON)', 'summary': 'AlexART - Test Story', 'type': 'Story', 'description': 'this is a test Story'}"}, {"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"4b0dfc2817d1a41437920cceb58dca16\")>"}, {"name": "jira_rest", "value": "<src.rest.jira.Jira object at 0x000001DD39BAD9E8>"}], "start": 1537448638341, "stop": 1537448668021}], "parameters": [{"name": "issue_data", "value": "{'project': 'AQAPython (AQAPYTHON)', 'summary': 'AlexART - Test Story', 'type': 'Story', 'description': 'this is a test Story'}"}], "start": 1537448638341, "stop": 1537448668022, "uuid": "1f658ce9-f809-470e-aa4a-d456ae23ef41", "historyId": "372fb0944749165711077e972274655b", "fullName": "src.tests.test_selenium.TestIssues#test_create_issue_positive[issue_data0]", "labels": [{"name": "severity", "value": "critical"}, {"name": "story", "value": "Create issue"}, {"name": "tag", "value": "UI"}, {"name": "feature", "value": "Issues management"}, {"name": "parentSuite", "value": "src.tests"}, {"name": "suite", "value": "test_selenium"}, {"name": "subSuite", "value": "TestIssues"}, {"name": "host", "value": "odp1210013"}, {"name": "thread", "value": "22160-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.test_selenium"}]}